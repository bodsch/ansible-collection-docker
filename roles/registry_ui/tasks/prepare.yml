---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yml"
        - default.yaml
      skip: true

- name: define delegate instance for download handling
  ansible.builtin.set_fact:
    registry_ui_delegate_to: "{{ ansible_host }}"
    registry_ui_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/registry', true) }}/{{ registry_ui_version }}"
  when:
    - registry_ui_direct_download

- name: install dependency
  ansible.builtin.package:
    name: "{{ registry_ui_requirements }}"
    state: present
  when:
    - registry_ui_requirements | default([]) | count > 0

- name: get latest release
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - registry_ui_version == "latest"
  block:
    - name: get latest release
      delegate_to: localhost
      become: false
      run_once: true
      bodsch.scm.github_latest:
        project: bodsch
        repository: docker-registry-ui
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      register: _latest_release

    - name: re-define registry_ui_version
      ansible.builtin.set_fact:
        registry_ui_version: "{{ _latest_release.latest_release }}"

- name: detect installed registry-ui binary
  ansible.builtin.stat:
    path: "{{ registry_ui_install_path }}/registry-ui"
  register: stat_registry_ui_binary

- name: create download directory
  become: false
  delegate_to: "{{ registry_ui_delegate_to }}"
  ansible.builtin.file:
    path: "{{ registry_ui_local_tmp_directory }}"
    state: directory
    mode: 0750

- name: user and group handling
  when:
    - registry_ui_system_user != "root" or registry_ui_system_group != "root"
  block:
    - name: create registry group
      ansible.builtin.group:
        name: "{{ registry_ui_system_group }}"
        state: present
        system: true
      when:
        - registry_ui_system_group != "root"

    - name: create registry user
      ansible.builtin.user:
        name: "{{ registry_ui_system_user }}"
        groups: "{{ registry_ui_system_group }}"
        append: true
        shell: /usr/sbin/nologin
        system: true
        createhome: false
        home: "{{ registry_ui_data_dir }}"
      when:
        - registry_ui_system_user != "root"

- name: create install directory
  ansible.builtin.file:
    path: "{{ registry_ui_install_path }}"
    state: directory
    owner: "{{ registry_ui_system_user }}"
    group: "{{ registry_ui_system_group }}"
    mode: 0755

- name: merge registry configuration between defaults and custom
  ansible.builtin.set_fact:
    registry_ui_service: "{{ registry_ui_defaults_service | combine(registry_ui_service, recursive=True) }}"
    registry_ui_listen: "{{ registry_ui_defaults_listen | combine(registry_ui_listen, recursive=True) }}"
    registry_ui_registry: "{{ registry_ui_defaults_registry | combine(registry_ui_registry, recursive=True) }}"
    registry_ui_event: "{{ registry_ui_defaults_event | combine(registry_ui_event, recursive=True) }}"
    registry_ui_cache: "{{ registry_ui_defaults_cache | combine(registry_ui_cache, recursive=True) }}"
    registry_ui_admins: "{{ registry_ui_defaults_admins | combine(registry_ui_admins, recursive=True) }}"
    registry_ui_purge: "{{ registry_ui_defaults_purge | combine(registry_ui_purge, recursive=True) }}"

...
