---

registry_main_version: "{{ registry_version[0:3] }}"

registry_install_path: /usr/local/bin/registry/{{ registry_version }}

registry_delegate_to: localhost

registry_local_tmp_directory: "{{
  lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
  default(lookup('env', 'HOME') ~ '/.cache/ansible/registry', true) }}/{{ registry_version }}"

registry_requirements:
  - iproute2
  - gzip

# ----------------------------------------------------------------------------------------

registry_defaults_service: {}

# https://github.com/registry/registry/blob/master/v2/pkg/config/config.go

registry_defaults_log:                                      #
  accesslog:                                                # AccessLog configures access logging.
    disabled: true                                          # Disabled disables access logging.
  level: info                                               # Level is the granularity at which registry operations are logged.
  formatter: text                                           # Formatter overrides the default formatter with another. Options include "text", "json" and "logstash".
  fields: {}                                                # Fields allows users to specify static string fields to include in the logger context.
  #  service: registry                                      #
  #  environment: staging                                   #
  hooks: []                                                 # Hooks allows users to configure the log hooks, to enabling the sequent handling behavior, when defined levels of log message emit.
  #   - type: mail                                          # Type allows user to select which type of hook handler they want.
  #     disabled: true                                      # Disable lets user select to enable hook or not.
  #     levels:                                             # Levels set which levels of log message will let hook executed.
  #       - panic                                           #
  #     options:                                            # MailOptions allows user to configure email parameters.
  #       smtp:                                             # SMTP defines the configuration options for the SMTP server used for sending email notifications.
  #         addr: mail.example.com:25                       # Addr defines smtp host address
  #         username: mailuser                              # Username defines user name to smtp host
  #         password: password                              # Password defines password of login user
  #         insecure: true                                  # Insecure defines if smtp login skips the secure certification.
  #       from: sender@example.com                          # From defines mail sending address
  #       to:                                               # To defines mail receiving address
  #         - errors@example.com                            #
  reportcaller: false                                       # ReportCaller allows user to configure the log to report the caller

registry_defaults_storage:                                  # Type returns the storage driver type, such as filesystem or s3
  filesystem:
    rootdirectory: /var/lib/registry
    maxthreads: 100
  # inmemory:  # This driver takes no parameters
  delete:
    enabled: false
  # redirect:
  #   disable: false
  cache:
    # blobdescriptor: redis
    blobdescriptorsize: 10000
#   maintenance:
#     uploadpurging:
#       enabled: true
#       age: 168h
#       interval: 24h
#       dryrun: false
#     readonly:
#       enabled: false
#
#   tag:
#     concurrencylimit: 8

#   azure:
#     accountname: accountname
#     accountkey: base64encodedaccountkey
#     container: containername
#   gcs:
#     bucket: bucketname
#     keyfile: /path/to/keyfile
#     credentials:
#       type: service_account
#       project_id: project_id_string
#       private_key_id: private_key_id_string
#       private_key: private_key_string
#       client_email: client@example.com
#       client_id: client_id_string
#       auth_uri: http://example.com/auth_uri
#       token_uri: http://example.com/token_uri
#       auth_provider_x509_cert_url: http://example.com/provider_cert_url
#       client_x509_cert_url: http://example.com/client_cert_url
#     rootdirectory: /gcs/object/name/prefix
#     chunksize: 5242880
#   s3:
#     accesskey: awsaccesskey
#     secretkey: awssecretkey
#     region: us-west-1
#     regionendpoint: http://myobjects.local
#     forcepathstyle: true
#     accelerate: false
#     bucket: bucketname
#     encrypt: true
#     keyid: mykeyid
#     secure: true
#     v4auth: true
#     chunksize: 5242880
#     multipartcopychunksize: 33554432
#     multipartcopymaxconcurrency: 100
#     multipartcopythresholdsize: 33554432
#     rootdirectory: /s3/object/name/prefix
#     usedualstack: false
#   swift:
#     username: username
#     password: password
#     authurl: https://storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth
#     tenant: tenantname
#     tenantid: tenantid
#     domain: domain name for Openstack Identity v3 API
#     domainid: domain id for Openstack Identity v3 API
#     insecureskipverify: true
#     region: fr
#     container: containername
#     rootdirectory: /swift/object/name/prefix
#   oss:
#     accesskeyid: accesskeyid
#     accesskeysecret: accesskeysecret
#     region: OSS region name
#     endpoint: optional endpoints
#     internal: optional internal endpoint
#     bucket: OSS bucket
#     encrypt: optional enable server-side encryption
#     encryptionkeyid: optional KMS key id for encryption
#     secure: optional ssl setting
#     chunksize: optional size valye
#     rootdirectory: optional root directory

registry_defaults_auth: {}
#   silly:
#     realm: silly-realm
#     service: silly-service
#   token:
#     autoredirect: true
#     realm: token-realm
#     service: token-service
#     issuer: registry-token-issuer
#     rootcertbundle: /root/certs/bundle
#   htpasswd:
#     realm: basic-realm
#     path: /path/to/htpasswd

registry_defaults_middleware: {}
#   registry:
#     - name: ARegistryMiddleware
#       options:
#         foo: bar
#   repository:
#     - name: ARepositoryMiddleware
#       options:
#         foo: bar
#   storage:
#     - name: cloudfront
#       options:
#         baseurl: https://my.cloudfronted.domain.com/
#         privatekey: /path/to/pem
#         keypairid: cloudfrontkeypairid
#         duration: 3000s
#         ipfilteredby: awsregion
#         awsregion: us-east-1, use-east-2
#         updatefrequency: 12h
#         iprangesurl: https://ip-ranges.amazonaws.com/ip-ranges.json
#   storage:
#     - name: redirect
#       options:
#         baseurl: https://example.com/

registry_defaults_reporting: {}
#   bugsnag:
#     apikey: bugsnagapikey
#     releasestage: bugsnagreleasestage
#     endpoint: bugsnagendpoint
#   newrelic:
#     licensekey: newreliclicensekey
#     name: newrelicname
#     verbose: true

registry_defaults_http:
  addr: localhost:5000                                      # Addr specifies the bind address for the registry instance.
  net: ""                                                   # Net specifies the net portion of the bind address. A default empty value means tcp.
  # host: https://myregistryaddress.org:5000                # Host specifies an externally-reachable address for the registry, as a fully qualified URL
  # prefix: /my/nested/registry/                            # Prefix specifies a URL path prefix for the HTTP interface.
                                                            # This can be used to serve the registry under a specific path
                                                            # rather than at the root of the domain (e.g., "/registry").

  secret: "{{ ansible_host | b64encode }}"                  # Secret specifies the secret key which HMAC tokens are created with.
  relativeurls: true                                        # RelativeURLs specifies that relative URLs should be returned in Location headers
  ## draintimeout: 60s                                      # Amount of time to wait for connection to drain before shutting down when registry
                                                            # receives a stop signal
  ## tls:                                                   # TLS instructs the http server to listen with a TLS configuration.
                                                            # This only support simple tls configuration with a cert and key.
                                                            # Mostly, this is useful for testing situations or simple deployments
                                                            # that require tls. If more complex configurations are required, use
                                                            # a proxy or make a proposal to add support here.
  ##   certificate: /path/to/x509/public                    # Certificate specifies the path to an x509 certificate file to be used for TLS.
  ##   key: /path/to/x509/private                           # Key specifies the path to the x509 key file, which should contain the private portion for the file specified in Certificate.
  ##   clientcas:                                           # Specifies the CA certs for client authentication
  ##     - /path/to/ca.pem                                  #
  ##     - /path/to/another/ca.pem                          #
  ##   clientauth:                                          # Client certificate authentication mode (One of: request-client-cert, require-any-client-cert, verify-client-cert-if-given, require-and-verify-client-cert)
  ##   minimumtls:                                          # Specifies the lowest TLS version allowed
  ##   ciphersuites: []                                     # Specifies a list of cipher suites allowed
  ##   letsencrypt:                                         # LetsEncrypt is used to configuration setting up TLS through
  ##     cachefile: /path/to/cache-file                     # CacheFile specifies cache file to use for lets encrypt certificates and keys.
  ##     email: emailused@letsencrypt.com                   # Email is the email to use during Let's Encrypt registration
  ##     hosts: [myregistryaddress.org]                     # Hosts specifies the hosts which are allowed to obtain Let's Encrypt certificates.
  ##     directoryurl: ""                                   # DirectoryURL points to the CA directory endpoint. If empty, LetsEncrypt is used.
  debug:                                                    # 	//
    addr: localhost:5001                                    # Addr specifies the bind address for the debug server.
    prometheus:                                             # Prometheus configures the Prometheus telemetry endpoint for monitoring purposes.
      enabled: true                                         # Enabled determines whether Prometheus telemetry is enabled or not.
      path: /metrics                                        # Path specifies the URL path where the Prometheus metrics are exposed.
                                                            # The default is "/metrics", but it can be customized here.
#   headers:                                                # Headers is a set of headers to include in HTTP responses. A common
                                                            # use case for this would be security headers such as
                                                            # Strict-Transport-Security. The map keys are the header names, and
                                                            # the values are the associated header payloads.
#     X-Content-Type-Options: [nosniff]
#   http2:                                                  # HTTP2 configures options for HTTP/2 support.
#     disabled: false
#   h2c:                                                    # H2C configures support for HTTP/2 without requiring TLS (HTTP/2 Cleartext).
#     enabled: false                                        # Enables H2C (HTTP/2 Cleartext). Enable to support HTTP/2 without needing to configure TLS
                                                            # Useful when deploying the registry behind a load balancer (e.g. Cloud Run)

registry_defaults_notifications: {}                         # Notifications configures multiple http endpoints.
#   events:                                                 # EventConfig is the configuration for the event format that is sent to each Endpoint.
#     includereferences: true                               # include reference data in manifest events
#   endpoints:                                              # Endpoints is a list of http configurations for endpoints that  respond to webhook notifications. In the future, we may allow other kinds of endpoints, such as external queues.
#     - name: alistener                                     # identifies the endpoint in the registry instance.
#       disabled: false                                     # disables the endpoint
#       url: https://my.listener.com/event                  # post url for the endpoint.
#       headers: [<http.Header>]                            # static headers that should be added to all requests
#       timeout: 1s                                         # HTTP timeout
#       threshold: 10                                       # circuit breaker threshold before backing off on failure
#       backoff: 1s                                         # backoff duration
#       ignoredmediatypes:                                  # target media types to ignore
#         - application/octet-stream                        #
#       ignore:                                             # ignore event types
#         mediatypes:                                       #
#            - application/octet-stream                     #
#         actions:                                          #
#            - pull                                         #

registry_defaults_redis: {}                                 #
#   addr: localhost:6379                                    #
#   addrs: []                                               # since version 3.0.0
#     - localhost:6379                                      #
#   password: asecret                                       #
#   db: 0                                                   #
#   dialtimeout: 10ms                                       #
#   readtimeout: 10ms                                       #
#   writetimeout: 10ms                                      #
#   pool:                                                   # replaced: https://github.com/distribution/distribution/commit/b63cbb33181f9a917c226c59f15e284b96d87bd8
#     maxidle: 16                                           #
#     maxactive: 64                                         #
#     idletimeout: 300s                                     #
#
#   maxidleconns: 16                                        # since version 3.0.0
#   poolsize: 64                                            #
#   connmaxidletime: 300s                                   #
#
#   tls:                                                    #
#     enabled: false                                        #
#     certificate: ""                                       #
#     key: ""
#     clientcas:  []
#


registry_defaults_health:                                   # Health provides the configuration section for health checks.
  file: []                                                  # FileCheckers is a list of paths to check
  #  - file: ""                                             # File is the path to check
  #    interval: 10s                                        # Interval is the duration in between checks
  #    threshold: 5                                         # Threshold is the number of times a check must fail to trigger an unhealthy state
  http: []                                                  # HTTPCheckers is a list of URIs to check
  #  - uri: http://server.to.check/must/return/200          # URI is the HTTP URI to check
  #    headers:                                             # Headers lists static headers that should be added to all requests
  #      Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]#
  #    statuscode: 200                                      # StatusCode is the expected status code
  #    timeout: 3s                                          # Timeout is the duration to wait before timing out the HTTP request
  #    interval: 10s                                        # Interval is the duration in between checks
  #    threshold: 3                                         # Threshold is the number of times a check must fail to trigger an unhealthy state
  tcp: []                                                   # TCPCheckers is a list of URIs to check
  #  - addr: redis-server.domain.com:6379                   # Addr is the TCP address to check
  #    timeout: 3s                                          # Timeout is the duration to wait before timing out the TCP connection
  #    interval: 10s                                        # Interval is the duration in between checks
  #    threshold: 3                                         # Threshold is the number of times a check must fail to trigger an unhealthy state
  storagedriver:                                            # StorageDriver configures a health check on the configured storage driver
    enabled: true                                           # Enabled turns on the health check for the storage driver
    interval: 10s                                           # Interval is the duration in between checks
    threshold: 3                                            # Threshold is the number of times a check must fail to trigger an unhealthy state

registry_defaults_catalog:                                  # Catalog provides configuration options for the /v2/_catalog endpoint.
  maxentries:                                               # ax number of entries returned by the catalog endpoint.

registry_defaults_proxy: {}                                 #
#  remoteurl: https://registry-1.docker.io                  #
#  username: [username]                                     #
#  password: [password]                                     #

registry_defaults_compatibility: {}                         #
#   schema1:                                                #
#     signingkeyfile: /etc/registry/key.json                #
#     enabled: true                                         #

registry_defaults_validation: {}                            #
#   manifests:                                              #
#     urls:                                                 #
#       allow:                                              #
#         - ^https?://([^/]+\.)*example\.com/               #
#       deny:                                               #
#         - ^https?://www\.example\.com/                    #

registry_defaults_policy:                                   # Policy defines configuration options for managing registry policies.
  repository: []                                            # Repository configures policies for repositories

# ----------------------------------------------------------------------------------------

registry_checksum_url: "{{ registry_release_download_url }}/download/v{{ registry_version }}/registry_{{ registry_version }}_linux_{{ system_architecture }}.tar.gz.sha256"

registry_defaults_directory: /etc/default

go_arch_map:
  x86_64: 'amd64'
  aarch64: 'arm64'
  armv7l: 'armv7'
  armv6l: 'armv6'

system_architecture: "{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}"

systemd_lib_directory: /lib/systemd/system

...
