---

registry_main_version: "{{ registry_version[0:3] }}"

registry_install_path: /usr/local/bin/registry/{{ registry_version }}

registry_delegate_to: localhost

registry_local_tmp_directory: "{{
  lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
  default(lookup('env', 'HOME') ~ '/.cache/ansible/registry', true) }}/{{ registry_version }}"

registry_requirements:
  - iproute2
  - gzip

# ----------------------------------------------------------------------------------------

registry_defaults_service: {}

# https://github.com/registry/registry/blob/master/v2/pkg/config/config.go

registry_defaults_log:
  accesslog:
    disabled: true
  level: info
  formatter: text
  fields: {}
  #  service: registry
  #  environment: staging
  # hooks:
  #   - type: mail
  #     disabled: true
  #     levels:
  #       - panic
  #     options:
  #       smtp:
  #         addr: mail.example.com:25
  #         username: mailuser
  #         password: password
  #         insecure: true
  #       from: sender@example.com
  #       to:
  #         - errors@example.com

registry_defaults_storage:
  filesystem:
    rootdirectory: /var/lib/registry
    maxthreads: 100
  # inmemory:  # This driver takes no parameters
  delete:
    enabled: false
  # redirect:
  #   disable: false
  cache:
    # blobdescriptor: redis
    blobdescriptorsize: 10000
#   maintenance:
#     uploadpurging:
#       enabled: true
#       age: 168h
#       interval: 24h
#       dryrun: false
#     readonly:
#       enabled: false

#   azure:
#     accountname: accountname
#     accountkey: base64encodedaccountkey
#     container: containername
#   gcs:
#     bucket: bucketname
#     keyfile: /path/to/keyfile
#     credentials:
#       type: service_account
#       project_id: project_id_string
#       private_key_id: private_key_id_string
#       private_key: private_key_string
#       client_email: client@example.com
#       client_id: client_id_string
#       auth_uri: http://example.com/auth_uri
#       token_uri: http://example.com/token_uri
#       auth_provider_x509_cert_url: http://example.com/provider_cert_url
#       client_x509_cert_url: http://example.com/client_cert_url
#     rootdirectory: /gcs/object/name/prefix
#     chunksize: 5242880
#   s3:
#     accesskey: awsaccesskey
#     secretkey: awssecretkey
#     region: us-west-1
#     regionendpoint: http://myobjects.local
#     forcepathstyle: true
#     accelerate: false
#     bucket: bucketname
#     encrypt: true
#     keyid: mykeyid
#     secure: true
#     v4auth: true
#     chunksize: 5242880
#     multipartcopychunksize: 33554432
#     multipartcopymaxconcurrency: 100
#     multipartcopythresholdsize: 33554432
#     rootdirectory: /s3/object/name/prefix
#     usedualstack: false
#   swift:
#     username: username
#     password: password
#     authurl: https://storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth
#     tenant: tenantname
#     tenantid: tenantid
#     domain: domain name for Openstack Identity v3 API
#     domainid: domain id for Openstack Identity v3 API
#     insecureskipverify: true
#     region: fr
#     container: containername
#     rootdirectory: /swift/object/name/prefix
#   oss:
#     accesskeyid: accesskeyid
#     accesskeysecret: accesskeysecret
#     region: OSS region name
#     endpoint: optional endpoints
#     internal: optional internal endpoint
#     bucket: OSS bucket
#     encrypt: optional enable server-side encryption
#     encryptionkeyid: optional KMS key id for encryption
#     secure: optional ssl setting
#     chunksize: optional size valye
#     rootdirectory: optional root directory

registry_defaults_auth: {}
#   silly:
#     realm: silly-realm
#     service: silly-service
#   token:
#     autoredirect: true
#     realm: token-realm
#     service: token-service
#     issuer: registry-token-issuer
#     rootcertbundle: /root/certs/bundle
#   htpasswd:
#     realm: basic-realm
#     path: /path/to/htpasswd

registry_defaults_middleware: {}
#   registry:
#     - name: ARegistryMiddleware
#       options:
#         foo: bar
#   repository:
#     - name: ARepositoryMiddleware
#       options:
#         foo: bar
#   storage:
#     - name: cloudfront
#       options:
#         baseurl: https://my.cloudfronted.domain.com/
#         privatekey: /path/to/pem
#         keypairid: cloudfrontkeypairid
#         duration: 3000s
#         ipfilteredby: awsregion
#         awsregion: us-east-1, use-east-2
#         updatefrequency: 12h
#         iprangesurl: https://ip-ranges.amazonaws.com/ip-ranges.json
#   storage:
#     - name: redirect
#       options:
#         baseurl: https://example.com/

registry_defaults_reporting: {}
#   bugsnag:
#     apikey: bugsnagapikey
#     releasestage: bugsnagreleasestage
#     endpoint: bugsnagendpoint
#   newrelic:
#     licensekey: newreliclicensekey
#     name: newrelicname
#     verbose: true

registry_defaults_http:
  addr: localhost:5000
  # prefix: /my/nested/registry/
  # host: https://myregistryaddress.org:5000
  secret: "{{ ansible_host | b64encode }}"
  relativeurls: true
  ## draintimeout: 60s
  ## tls:
  ##   certificate: /path/to/x509/public
  ##   key: /path/to/x509/private
  ##   clientcas:
  ##     - /path/to/ca.pem
  ##     - /path/to/another/ca.pem
  ##   letsencrypt:
  ##     cachefile: /path/to/cache-file
  ##     email: emailused@letsencrypt.com
  ##     hosts: [myregistryaddress.org]
  debug:
    addr: localhost:5001
    prometheus:
      enabled: true
      path: /metrics
#   headers:
#     X-Content-Type-Options: [nosniff]
#   http2:
#     disabled: false

registry_defaults_notifications: {}
#   events:
#     includereferences: true
#   endpoints:
#     - name: alistener
#       disabled: false
#       url: https://my.listener.com/event
#       headers: [<http.Header>]
#       timeout: 1s
#       threshold: 10
#       backoff: 1s
#       ignoredmediatypes:
#         - application/octet-stream
#       ignore:
#         mediatypes:
#            - application/octet-stream
#         actions:
#            - pull

registry_defaults_redis: {}
#   addr: localhost:6379
#   password: asecret
#   db: 0
#   dialtimeout: 10ms
#   readtimeout: 10ms
#   writetimeout: 10ms
#   pool:
#     maxidle: 16
#     maxactive: 64
#     idletimeout: 300s
#   tls:
#     enabled: false

registry_defaults_health:
  storagedriver:
    enabled: true
    interval: 10s
    threshold: 3
#   file:
#     - file: /path/to/checked/file
#       interval: 10s
#   http:
#     - uri: http://server.to.check/must/return/200
#       headers:
#         Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]
#       statuscode: 200
#       timeout: 3s
#       interval: 10s
#       threshold: 3
#   tcp:
#     - addr: redis-server.domain.com:6379
#       timeout: 3s
#       interval: 10s
#       threshold: 3

registry_defaults_proxy: {}
#  remoteurl: https://registry-1.docker.io
#  username: [username]
#  password: [password]

registry_defaults_compatibility: {}
#   schema1:
#     signingkeyfile: /etc/registry/key.json
#     enabled: true

registry_defaults_validation: {}
#   manifests:
#     urls:
#       allow:
#         - ^https?://([^/]+\.)*example\.com/
#       deny:
#         - ^https?://www\.example\.com/

# ----------------------------------------------------------------------------------------

registry_checksum_url: "{{ registry_release_download_url }}/download/v{{ registry_version }}/registry_{{ registry_version }}_linux_{{ system_architecture }}.tar.gz.sha256"

registry_defaults_directory: /etc/default

go_arch_map:
  x86_64: 'amd64'
  aarch64: 'arm64'
  armv7l: 'armv7'
  armv6l: 'armv6'

system_architecture: "{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}"

systemd_lib_directory: /lib/systemd/system

...
