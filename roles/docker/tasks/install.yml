---

- name: remove default packaged docker
  ansible.builtin.package:
    name:
      - docker
      - docker-engine
    state: absent
  when:
    - not (ansible_os_family | lower == 'archlinux' or
           ansible_os_family | lower | replace(' ', '') == 'artixlinux')

- name: install docker
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: "{{ docker_state }}"

- name: create docker run configuration
  ansible.builtin.template:
    src: "docker.j2"
    dest: "{{ docker_defaults_directory }}/docker"
    force: true
    owner: root
    group: root
    mode: 0640
  notify:
    - validate config
    - reload docker

- name: ensure containerd is running and enabled on archlinux
  ansible.builtin.service:
    name: containerd
    state: started
    enabled: "{{ docker_service.enable }}"
  when:
    - ansible_os_family | lower == 'archlinux'
    - ansible_service_mgr | lower == 'systemd'

- name: ensure {{ docker_service.name }} is running
  ansible.builtin.service:
    name: "{{ docker_service.name }}"
    state: started
  register: running_service
  ignore_errors: true

- name: daemon start has failed
  when:
    - running_service.failed
  block:
    # - name: journalctl entries from this module
    #   bodsch.systemd.journalctl:
    #     identifier: docker
    #     lines: 10
    #   register: journalctl_docker
    #   when:
    #     - ansible_service_mgr == 'systemd'
    #
    # - name:
    #   debug:
    #     msg: "{{ journalctl_docker.stdout }}"
    #   # when: "'failed to start daemon' in journalctl_docker.stdout"

    - name: ensure {{ docker_service.name }} is stopped
      ansible.builtin.service:
        name: "{{ docker_service.name }}"
        state: stopped

    - name: re-create safe docker config file daemon.json
      bodsch.docker.docker_common_config:
        state: present
        diff_output: "{{ docker_config_diff }}"
        data_root: "{{ docker_config.data_root | default(omit) }}"
        max_concurrent_downloads: "{{ docker_config.max_concurrent_downloads | int | default(omit) }}"
        max_concurrent_uploads: "{{ docker_config.max_concurrent_uploads | int | default(omit) }}"
        max_download_attempts: "{{ docker_config.max_download_attempts | int | default(omit) }}"
        metrics_addr: "{{ docker_config.metrics_addr | default(omit) }}"
        debug: "{{ docker_config.debug | default('false') | bool }}"
        selinux_enabled: "{{ docker_config.selinux_enabled | default('false') | bool }}"
        seccomp_profile: "{{ docker_config.seccomp_profile | default(omit) }}"
        experimental: "{{ docker_config.experimental | default('false') | bool }}"
        hosts: "{{ docker_config.hosts | default(omit) }}"
        insecure_registries: "{{ docker_config.insecure_registries | default(omit) }}"
        shutdown_timeout: "{{ docker_config.shutdown_timeout | int | default(omit) }}"
        tls_verify: "{{ docker_config.tls.verify | default('false') | bool }}"
        tls_ca_cert: "{{ docker_config.tls.ca_cert | default(omit) }}"
        tls_cert: "{{ docker_config.tls.cert | default(omit) }}"
        tls_key: "{{ docker_config.tls.key | default(omit) }}"

    - name: ensure {{ docker_service.name }} is running
      ansible.builtin.service:
        name: "{{ docker_service.name }}"
        state: started

- name: wait for running docker
  ansible.builtin.wait_for:
    path: /run/docker.pid
    state: present
    delay: 2
    sleep: 2
    msg: Timeout to find file /run/docker.pid

- name: define docker_version
  bodsch.docker.docker_version:
  register: docker_version

- name: create custom fact file
  bodsch.core.facts:
    name: docker
    facts:
      version:
        docker: "{{ docker_version.versions.docker_version }}"
        api: "{{ docker_version.versions.api_version }}"

...
